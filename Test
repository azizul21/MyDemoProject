    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.SecurityFilterChain;
    import org.springframework.security.ldap.userdetails.LdapAuthoritiesPopulator;
    import org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator;
    import org.springframework.ldap.core.ContextSource;
    import org.springframework.security.ldap.authentication.BindAuthenticator;
    import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;

    @Configuration
    @EnableWebSecurity
    public class SecurityConfig {

        @Bean
        public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
            http
                .authorizeHttpRequests(authorize -> authorize
                    .anyRequest().authenticated()
                )
                .formLogin(form -> form
                    .permitAll()
                )
                .ldapLogin(); // Enables LDAP authentication

            return http.build();
        }

        @Bean
        public LdapAuthenticationProvider ldapAuthenticationProvider(ContextSource contextSource, LdapAuthoritiesPopulator ldapAuthoritiesPopulator) {
            BindAuthenticator authenticator = new BindAuthenticator(contextSource);
            authenticator.setUserDnPatterns(new String[]{"uid={0},ou=users"}); // Adjust DN pattern as needed
            return new LdapAuthenticationProvider(authenticator, ldapAuthoritiesPopulator);
        }

        @Bean
        public LdapAuthoritiesPopulator ldapAuthoritiesPopulator(ContextSource contextSource) {
            DefaultLdapAuthoritiesPopulator populator = new DefaultLdapAuthoritiesPopulator(contextSource, "ou=groups"); // Adjust group search base
            populator.setGroupSearchFilter("member={0}"); // Adjust group search filter
            return populator;
        }

        // Optional: Password encoder if needed for other authentication methods or password storage
        @Bean
        public PasswordEncoder passwordEncoder() {
            return new BCryptPasswordEncoder();
        }
    }
